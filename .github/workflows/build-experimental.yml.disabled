name: Build

on:
  push:
    branches:
      - master
  schedule:
    - cron: '0 3 * * *'

env:
  DOCKER_REPO: reddditopenttd/openttd
  GHCR_REPO: ghcr.io/${{ github.repository_owner }}/openttd

jobs:
  cri:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        train:
          - stable
          - testing
        platform:
          - linux/amd64
          - linux/arm64
          - linux/arm/v6
          - linux/arm/v7

    steps:
      - name: Set target platform variable
        id: vars
        run: |
          echo "platform=$(echo -n ${{ matrix.platform }} | sed 's/\//-/g')" >> $GITHUB_OUTPUT
      
      - name: Git checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: '0'

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Discover upstream version
        uses: ropenttd/cdn_version_scraper@master
        with:
          channel: ${{ matrix.train }}
        id: version
      
      # The following is needed to ensure there isn't a race condition if upstream updates the version between
      # this build workflow running, and the manifest workflow running.
      # There is still a risk that the version returned by each matrixed architecture run is different,
      # but that is (hopefully!) minimal.
      - name: Dump upstream train version to file
        shell: bash
        run: |
          echo $GITHUB_OUTPUT > version.txt
      - name: Upload upstream train version information
        uses: actions/upload-artifact@v3
        with:
          name: ver-${{ matrix.train }}
          path: version.txt
          retention-days: 1

      - name: Generate CRI metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            $GHCR_REPO
            $DOCKER_REPO
          labels: |
            org.opencontainers.image.title=OpenTTD
            org.opencontainers.image.description=Lightweight build of OpenTTD, designed for server use, with some extra helping treats.
            org.opencontainers.image.url=https://github.com/ropenttd/docker_openttd
            org.opencontainers.image.source=https://github.com/openttd/openttd
            org.opencontainers.image.vendor=Reddit OpenTTD
            org.opencontainers.image.version=${{ steps.version.outputs.version }}
          tags: |
            ${{ steps.version.outputs.version }}-${{ steps.vars.outputs.platform }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: ./Dockerfile
          build-args: |
            OPENTTD_VERSION=${{ steps.version.outputs.version }}
          platforms: ${{ matrix.platform }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  release-bundle-manifest:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: build
    strategy:
      matrix:
        train:
          - stable
          - testing

    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Login to Github Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GH_TOKEN }}

      - name: Get target version for this train from build phase
        uses: actions/download-artifact@v3
        with:
          name: ver-${{ matrix.train }}

      - name: Set target version environment variable
        run: cat version.txt >> $GITHUB_ENV

      - name: Create and push manifest (docker stable)
        uses: Noelware/docker-manifest-action@v0.3.1
        if: matrix.train == 'stable'
        with:
          inputs: 
            - $DOCKER_REPO:stable
            - $DOCKER_REPO:latest
          images: 
            - $DOCKER_REPO:${{ env.version }}-linux-amd64
            - $DOCKER_REPO:${{ env.version }}-linux-arm64
            - $DOCKER_REPO:${{ env.version }}-linux-arm-v6
            - $DOCKER_REPO:${{ env.version }}-linux-arm-v7
          push: true
      
      - name: Create and push manifest (ghcr stable)
        uses: Noelware/docker-manifest-action@v0.3.1
        if: matrix.train == 'stable'
        with:
          inputs: 
            - $GHCR_REPO:latest
            - $GHCR_REPO:stable
            - $GHCR_REPO:${{ env.semver_major }}
            - $GHCR_REPO:${{ env.version }}
          images: 
            - $GHCR_REPO:${{ env.version }}-linux-amd64
            - $GHCR_REPO:${{ env.version }}-linux-arm64
            - $GHCR_REPO:${{ env.version }}-linux-arm-v6
            - $GHCR_REPO:${{ env.version }}-linux-arm-v7
          push: true
      
      - name: Create and push manifest (docker testing)
        uses: Noelware/docker-manifest-action@v0.3.1
        if: matrix.train == 'testing'
        with:
          inputs: 
            - $DOCKER_REPO:testing
            - $DOCKER_REPO:${{ env.version }}
          images: 
            - $DOCKER_REPO:${{ env.version }}-linux-amd64
            - $DOCKER_REPO:${{ env.version }}-linux-arm64
            - $DOCKER_REPO:${{ env.version }}-linux-arm-v6
            - $DOCKER_REPO:${{ env.version }}-linux-arm-v7
          push: true
      
      - name: Create and push manifest (ghcr testing)
        uses: Noelware/docker-manifest-action@v0.3.1
        if: matrix.train == 'testing'
        with:
          inputs: 
            - $GHCR_REPO:testing
            - $GHCR_REPO:${{ env.version }}
          images: 
            - $GHCR_REPO:${{ env.version }}-linux-amd64
            - $GHCR_REPO:${{ env.version }}-linux-arm64
            - $GHCR_REPO:${{ env.version }}-linux-arm-v6
            - $GHCR_REPO:${{ env.version }}-linux-arm-v7
          push: true
